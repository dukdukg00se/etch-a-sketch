let currentPenColor = "#000000";
let currentBkgrndColor = "#ffffff";
let rainbowMode = false;
let eraserMode = false;

// Create a grid in a 500px x 500px container; default is 25x25
function createGrid(num) {
  const innerContainer = document.createElement("div");
  innerContainer.classList.add("inner-container");
  for (let rows = 0; rows < num; rows++) {
    for (let columns = 0; columns < num; columns++) {
      const box = document.createElement("div");
      box.classList.add("box", "gridLines", "empty");
      innerContainer.append(box);
      box.style.cssText = `width: ${500 / num}px; height: ${500 / num}px`;
    }
  }
  const outerContainer = document.querySelector("#outer-container");
  outerContainer.append(innerContainer);
}
createGrid(25);

// On slider click, remove previous grid, create new grid, set bkgrnd and pen colors
const slider = document.getElementById("slider");
slider.addEventListener("click", function (e) {
  const innerContainer = document.querySelector(".inner-container");
  innerContainer.remove();
  createGrid(e.target.value);
  const box = document.querySelectorAll(".box");
  box.forEach((singleBox) => {
    singleBox.style.backgroundColor = currentBkgrndColor;
    //singleBox.classList.add("empty");
    singleBox.addEventListener("mouseenter", function () {
      if (rainbowMode) {
        singleBox.style.backgroundColor = getRandomColor();
      } else if (eraserMode) {
        singleBox.style.backgroundColor = currentBkgrndColor;
      } else {
        singleBox.style.backgroundColor = currentPenColor;
      }
      singleBox.classList.remove("empty");
    });
  });
});

// Update slider size text as you move slider thumb
const gridSize = document.getElementById("slider-size");
slider.addEventListener("mousemove", function (e) {
  gridSize.textContent = `Grid Size: ${e.target.value} x ${e.target.value}`;
});

// Set pen and eraser button background color when active/inactive
function checkMode() {
  if (rainbowMode) {
    penRainbow.style.cssText = "background-color: black; color: white";
  } else if (!rainbowMode) {
    penRainbow.style.cssText =
      "background-color: rgb(239, 239, 239); color: black";
  }
  if (eraserMode) {
    penEraser.style.cssText = "background-color: black; color: white";
  } else if (!eraserMode) {
    penEraser.style.cssText =
      "background-color: rgb(239, 239, 239); color: black";
  }
}

// Set default pen color effect to currentPenColor (black)
const box = document.querySelectorAll(".box");
box.forEach((singleBox) => {
  singleBox.addEventListener("mouseenter", function () {
    singleBox.style.backgroundColor = currentPenColor;
    singleBox.classList.remove("empty");
  });
});

// When 'Pen' button clicked, set the pen mode to currentPenColor
const pen = document.getElementById("pen-color");
pen.addEventListener("click", function () {
  rainbowMode = false;
  eraserMode = false;
  checkMode();
  const boxColor = document.querySelectorAll(".box");
  boxColor.forEach((singleBox) => {
    singleBox.addEventListener("mouseenter", function () {
      singleBox.style.backgroundColor = currentPenColor;
      singleBox.classList.remove("empty");
    });
  });
});

// Let browser know that pen color swatch clicked, update the currentPenColor variable, and set pen color to color input
const penColorInput = document.getElementById("pen-color-input");
penColorInput.addEventListener("input", updateColor);
function updateColor(event) {
  rainbowMode = false;
  eraserMode = false;
  currentPenColor = event.target.value;
  const boxColor = document.querySelectorAll(".box");
  boxColor.forEach((singleBox) => {
    singleBox.addEventListener("mouseenter", function () {
      singleBox.style.backgroundColor = currentPenColor;
      singleBox.classList.remove("empty");
    });
  });
}

// Let browser know that background color swatch clicked, update the currentBkgrndColor variable, and set background color to input by selecting only the 'empty' class
const bkgrndColor = document.getElementById("bkgrnd-color-input");
bkgrndColor.addEventListener("input", updateBkgrnd);
function updateBkgrnd(event) {
  const bkgrnd = document.querySelectorAll(".empty");
  currentBkgrndColor = event.target.value;
  bkgrnd.forEach((singleBox) => {
    singleBox.style.backgroundColor = currentBkgrndColor;
  });
  const box = document.querySelectorAll(".box");
  box.forEach((singleBox) => {
    singleBox.addEventListener("mouseenter", function () {
      if (rainbowMode) {
        singleBox.style.backgroundColor = getRandomColor();
      } else {
        singleBox.style.backgroundColor = currentPenColor;
      }
      singleBox.classList.remove("empty");
    });
  });
}

// Let browser know that 'Rainbow' button clicked and set pen color to random colors generated by setRainbow function
const penRainbow = document.getElementById("rainbow");
penRainbow.addEventListener("click", setRainbow);
function setRainbow() {
  rainbowMode = true;
  eraserMode = false;
  checkMode();
  const boxColor = document.querySelectorAll(".box");
  boxColor.forEach((singleBox) => {
    singleBox.addEventListener("mouseenter", function () {
      singleBox.style.backgroundColor = getRandomColor();
      singleBox.classList.remove("empty");
    });
  });
}

// Return bright rainbow colors
function getRandomColor() {
  return `hsl(${Math.random() * 360}, 100%, 50%)`;
}

// Let browser know that 'Eraser' clicked and set pen color to background color for eraser effect
const penEraser = document.getElementById("eraser");
penEraser.addEventListener("click", setEraser);
function setEraser() {
  rainbowMode = false;
  eraserMode = true;
  checkMode();
  const boxColor = document.querySelectorAll(".box");
  boxColor.forEach((singleBox) => {
    singleBox.addEventListener("mouseenter", function () {
      singleBox.style.backgroundColor = currentBkgrndColor;
      singleBox.classList.add("empty");
    });
  });
}

// When 'Clear" clicked, set all boxes to background color, set pen mode to current color mode
const clear = document.getElementById("clear");
clear.addEventListener("click", function () {
  const box = document.querySelectorAll(".box");
  box.forEach((singleBox) => {
    singleBox.style.backgroundColor = currentBkgrndColor;
    singleBox.classList.add("empty");
    singleBox.addEventListener("mouseenter", function () {
      if (rainbowMode) {
        singleBox.style.backgroundColor = getRandomColor();
      } else if (eraserMode) {
        singleBox.style.backgroundColor = currentBkgrndColor;
      } else {
        singleBox.style.backgroundColor = currentPenColor;
      }
      singleBox.classList.remove("empty");
    });
  });
});

// Toggle grid lines by removing box borders upon button click
const gridToggle = document.getElementById("grid-lines");
gridToggle.addEventListener("click", function () {
  const box = document.querySelectorAll(".box");
  box.forEach((boxSq) => {
    boxSq.classList.toggle("gridLines");
  });
});
